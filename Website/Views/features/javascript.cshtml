@{
    Page.Title = "JavaScript";
    Page.Keywords = "js, script, region, minify, javascript";
    Page.Description = "Writing JavaScript is so much better with Web Essentials";
    Layout = "~/Views/_Layout.cshtml";
}

<p>
    Some of the JavaScript features also apply to TypeScript.
</p>

<section>
    <h2>Features</h2>

    <article data-version="WE2012, WE2013">
        <h3>JSHint</h3>

        <p>
            JSHint is a really good way of making sure your JavaScript follows certain coding 
            guidelines and best practices. The default settings are very relaxed, but you can 
            turn on more rules through the new options dialog.
        </p>

        <img src="/images/js/jshint.png" alt="JSHint" width="358" height="144" />

        <p>
            The error window updates as you type, so you don’t have to right-click the .js file to kick off JSHint. It happens as you write.
        </p>

        <p>
            Each indiviual JavaScript file can override the global settings by using the official 
            JSHint comment format descripted in the <a href="http://www.jshint.com/docs/">JSHint documentation</a>.
        </p>
    </article>

    <article data-version="WE2013">
        <h3>.jshintrc and .jshintignore</h3>
        <p>
            These two files are fully supported and will be automatically applied when found.
        </p>
    </article>

    <article data-version="WE2012, WE2013">
        <h3>Regions</h3>

        <p>
            Some people hate them, other people loves them. This is a feature that was in the 
            original Web Essentials 2010 an by popular request now made it in the 2012 version.
        </p>

        <img src="/images/js/regions.png" alt="JavaScript regions" width="231" height="160" />
    </article>

    <article data-version="WE2012, WE2013">
        <h3>Outlining/code folding</h3>

        <p>
            Only functions provide outlining support by Visual Studio 2012. Web Essentials adds 
            outlining supports to any scope including multiline arrays.
        </p>
    </article>

    <article data-version="WE2012, WE2013">
        <h3>Minification</h3>

        <p>
            Right-click any JS file in Solution Explorer to produce a *.min.js file. Whenever the source .js file is changed, the .min.js file is updated accordingly.
        </p>
    </article>

    <article data-version="WE2012, WE2013">
        <h3>Source Maps</h3>

        <p>
            When minifying, Source Map (.js.maps) files are automatically generated by enabling it in Tools -> Options.
        </p>
    </article>

    <article data-version="WE2012, VS2013">
        <h3>Auto-complete braces</h3>

        <p>
            When an opening curly brace, square bracket or parenthesis is typed, the closing ditto 
            is inserted to the right of the cursor. Type-through is supported to not mess with muscle memory.
        </p>
    </article>

    <article data-version="WE2012, VS2013">
        <h3>Smarter indent</h3>

        <p>
            Hitting Enter when the cursor is between an opening and closing curly brace now places the 
            cursor correctly on the line below with the correct indentation.
        </p>
    </article>
    
    <article data-version="WE2013">
        <h3>Find All References</h3>

        <p>
            Use <mark>Shift+F12</mark> to see all references of any particular JavaScript identifier.
        </p>
    </article>

    <article data-version="WE2013">
        <h3>Go To Definition</h3>

        <p>
            Go To Definition is built in to VS2012 and VS2013.
            This feature makes the feature work with <code>/// &lt;reference&gt;</code> constructs
        </p>
    </article>
</section>

<section>
    <header>
        <h2>Intellisense</h2>
    </header>

    <article data-version="WE2013">
        <h3>getElementById</h3>
        <p>Finds #ID references in all stylesheets in the project and provide Intellisense for them in JavaScript.</p>
    </article>

    <article data-version="WE2013">
        <h3>getElementsByTagName</h3>
        <p>Intellisense for all HTML elements supported by the VS HTML editor.</p>
    </article>

    <article data-version="WE2013">
        <h3>getElementsByClassName</h3>
        <p>Finds <code>.classnames</code> in all stylesheets in the project and provide Intellisense for them in JavaScript.</p>
    </article>

    <article data-version="WE2013">
        <h3>"use strict"</h3>
        <p>Get Intellisens for <code>"use strict"</code> as well as "use asm".</p>
    </article>

    <article data-version="WE2013">
        <h3>NodeJS modules</h3>
        <p>Get Intellisens referencing NodeJS modules.</p>
    </article>
</section>